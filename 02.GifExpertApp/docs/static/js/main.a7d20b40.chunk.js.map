{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifts.jsx","components/GridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.jsx","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","action","onSubmit","e","preventDefault","trim","length","categorias","type","value","onChange","target","getGifts","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GridItem","className","src","alt","GifGrid","state","loading","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMA4BeA,EA1BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,yBADJ,mBAClCC,EADkC,KACtBC,EADsB,KAezC,OACE,sBAAMC,OAAO,GAAGC,SAVG,SAACC,GACpBA,EAAEC,iBACEL,EAAWM,OAAOC,OAAS,IAC7BT,GAAc,SAACU,GAAD,OAAiBR,GAAjB,mBAA+BQ,OAE7CP,EAAc,MAKhB,SACE,uBAAOQ,KAAK,OAAOC,MAAOV,EAAYW,SAdtB,SAACP,GACnBH,EAAcG,EAAEQ,OAAOF,a,+BCHZG,EAAQ,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACP,mCACTC,EAFgB,iDAEgCC,UAAUH,GAF1C,6BACP,oCADO,SAGHI,MAAMF,GAHH,cAGhBG,EAHgB,gBAICA,EAAKC,OAJN,uBAIdC,EAJc,EAIdA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVhB,kBAafM,GAbe,4CAAH,sDCSRO,EAVE,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBT,EAAiB,EAAjBA,IAAKU,EAAY,EAAZA,MAC3B,OACE,sBAAKI,UAAU,2CAAf,UAEE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QC2BKO,EA9BC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SASXoB,ECToB,SAACpB,GAAa,MAGdf,mBAAS,CACjCsB,KAAM,GACNc,SAAS,IAL6B,mBAGjCD,EAHiC,KAG1BE,EAH0B,KAoBxC,OAXAC,qBAAU,WACRxB,EAASC,GAAUwB,MAAK,SAACC,GAAD,OACtBC,YAAW,WACTJ,EAAS,CACPf,KAAMkB,EACNJ,SAAS,MAEV,UAEJ,CAACrB,IAEGoB,EDXOO,CAAa3B,GACnBO,EAAkBa,EAAlBb,KAAMc,EAAYD,EAAZC,QAGd,OACE,qCACE,6BAAKrB,IACJqB,GACC,mBAAGL,UAAU,mCAAb,2BAGA,qBAAKA,UAAU,YAAf,SACGT,EAAKE,KAAI,SAAEC,GAAF,OACR,cAAC,EAAD,eAA2BA,GAAZA,EAAIC,aEKhBiB,EA1BM,WAAM,MAGW3C,mBAAS,CAAC,gBAHrB,mBAGlB4C,EAHkB,KAGN7C,EAHM,KAOzB,OACE,qCACE,8CACA,uBACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACG6C,EAAWpB,KAAI,SAACT,GAAD,OAId,aAHE,CAGD,EAAD,CAAwBA,SAAUA,GAApBA,Y,YCbxB8B,IAASC,OAAO,cAAC,EAAD,IACdC,SAASC,eAAe,W","file":"static/js/main.a7d20b40.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from 'prop-types'\r\nconst AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"Agregue una categoria\");\r\n\r\n  const changeValue = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((categorias) => [inputValue,...categorias]);// de esta forma generariamos infinitos gifts\r\n      //setCategories([inputValue])\r\n      setInputValue('')\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form action=\"\" onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={changeValue} />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired,\r\n}\r\n\r\nexport default AddCategory;\r\n","\r\n\r\n\r\n  export const getGifts = async (category) => {\r\n    const apiKey = \"dZsmBSkl8RHgK23Mh88hiArPNxtTsQwA\";\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=${apiKey}`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map((img) => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url,\r\n      };\r\n    });\r\n    return gifs\r\n  };\r\n\r\n  ","import React from \"react\";\r\n\r\nconst GridItem = ({ id, url, title }) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__bounceIn\">\r\n      \r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GridItem;\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport GridItem from \"./GridItem\";\r\n\r\nconst GifGrid = ({ category }) => {\r\n  /*   const [images, setImages] = useState([]);\r\n\r\n  //con el useEffect lo que se consigue es que lo que hay dentro solo se consiga en el primer renderizado, p.e: se crea un nuevo elemento GifGrid\r\n  useEffect(() => {\r\n    getGifts(category).then(setImages)\r\n    \r\n  }, [category]); */\r\n\r\n  const state = useFetchGifs(category);\r\n  const { data, loading } = state;\r\n  //getGifts()\r\n\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n      {loading && \r\n        <p className=\"animate__animated animate__flash\">\"Cargando...\"</p>}\r\n\r\n\r\n        <div className=\"card-grid\">\r\n          {data.map(( img ) => (\r\n            <GridItem key={img.id} {...img} />\r\n          ))}\r\n        </div>\r\n      \r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifGrid;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nimport { getGifts } from \"../helpers/getGifts\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    // esto es como para poner un estado de la carga con lo que queremos devolver\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  //con el useEffect lo que se consigue es que lo que hay dentro solo se consiga en el primer renderizado, p.e: se crea un nuevo elemento GifGrid\r\n  useEffect(() => {\r\n    getGifts(category).then((imgs) =>\r\n      setTimeout(() => {\r\n        setState({\r\n          data: imgs,\r\n          loading: false,\r\n        });\r\n      }, 200)\r\n    );\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, {useState} from \"react\";\r\nimport AddCategory from \"./components/AddCategory\"\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\n\r\nconst GifExpertApp = () => {\r\n  //const categories = [\"One Punch\", \"Samurai X\", \"Dragon Ball\"];\r\n\r\n  const [categories, setCategories] = useState([\"Dragon Ball\"])\r\n\r\n\r\n  \r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <hr />\r\n      <AddCategory setCategories={setCategories}/>\r\n      <ul>\r\n        {categories.map((category) => (\r\n            //Importante, si al key le metemos un id nuevo del tipo index, recargara los dos elementos al ver dos cambios\r\n            //pero al pasarle el antiguo key, no volvera a recargar esos cambios \r\n          //<li key={category} >{category}</li>\r\n          <GifGrid key={category} category={category}/>\r\n        ))}\r\n      </ul>\r\n      \r\n      \r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport 'animate.css'\nimport './index.css';\n\n\n\nReactDOM.render(<GifExpertApp/>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}